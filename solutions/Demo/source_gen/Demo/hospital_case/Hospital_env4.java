package Demo.hospital_case;

/*Generated by MPS */

import javax.swing.JFrame;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.GridLayout;
import javax.swing.JLabel;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

public class Hospital_env4 extends JFrame {
  private DocumentListener listener = new DocumentListener() {
    public void insertUpdate(DocumentEvent p1) {
    }

    public void removeUpdate(DocumentEvent p1) {
    }

    public void changedUpdate(DocumentEvent p1) {
    }
  };
  private JTextField SystemRobotNFR_a_2 = new JTextField();
  private JTextField SystemRobotNFR_b_2 = new JTextField();
  private JTextField SystemRobotNFR_c_2 = new JTextField();
  private JTextField SystemRobotNFR_d_2 = new JTextField();
  private JTextField SystemRobotNFR_e_2 = new JTextField();
  private JTextField SystemRobotNFR_f_2 = new JTextField();
  private JTextField maxRob_a_2 = new JTextField();
  private JTextField maxRob_b_2 = new JTextField();
  private JTextField maxRob_c_2 = new JTextField();
  private JTextField maxRob_d_2 = new JTextField();
  private JTextField maxRob_e_2 = new JTextField();
  private JTextField maxRob_f_2 = new JTextField();
  private JTextField monRob_a_2 = new JTextField();
  private JTextField monRob_b_2 = new JTextField();
  private JTextField monRob_c_2 = new JTextField();
  private JTextField monRob_d_2 = new JTextField();
  private JTextField monRob_e_2 = new JTextField();
  private JTextField monRob_f_2 = new JTextField();
  private JTextField mostRob_a_2 = new JTextField();
  private JTextField mostRob_b_2 = new JTextField();
  private JTextField mostRob_c_2 = new JTextField();
  private JTextField mostRob_d_2 = new JTextField();
  private JTextField mostRob_e_2 = new JTextField();
  private JTextField mostRob_f_2 = new JTextField();
  private JTextField optimalRob_a_2 = new JTextField();
  private JTextField optimalRob_b_2 = new JTextField();
  private JTextField optimalRob_c_2 = new JTextField();
  private JTextField optimalRob_d_2 = new JTextField();
  private JTextField optimalRob_e_2 = new JTextField();
  private JTextField optimalRob_f_2 = new JTextField();
  private String[] scenarionfr = new String[10000];
  private String[] scenarionfrmax = new String[10000];
  private String[] scenarionfrmin = new String[10000];
  private String[] scenarionfrmost = new String[10000];
  /*package*/ JButton analyzer = new JButton("Click Here");
  private JTextField result = new JTextField();


  public Hospital_env4() {
    setTitle("Hospital_env4");
    setLayout(new GridLayout(0, 5, 20, 10));
    add(new JLabel("NFR ID"));
    add(new JLabel("Max Value"));
    add(new JLabel("Min Value"));
    add(new JLabel("Most Likely Value"));
    add(new JLabel("Optimal Value"));
    int i = 0;
    // Fetching the scenario NFRs
    {
      String id = "VRN101";
      String max = "0.4";
      String min = "0.3";
      String most = "0.35";
      scenarionfr[i] = id;
      scenarionfrmax[i] = max;
      scenarionfrmin[i] = min;
      scenarionfrmost[i] = most;
      i++;
    }
    {
      String id = "VRN102";
      String max = "200";
      String min = "100";
      String most = "150";
      scenarionfr[i] = id;
      scenarionfrmax[i] = max;
      scenarionfrmin[i] = min;
      scenarionfrmost[i] = most;
      i++;
    }
    {
      String id = "VRN103";
      String max = "2";
      String min = "1";
      String most = "1.6";
      scenarionfr[i] = id;
      scenarionfrmax[i] = max;
      scenarionfrmin[i] = min;
      scenarionfrmost[i] = most;
      i++;
    }
    add(new JLabel("System NFRs"));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel("External Component NFRs"));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel("Robot NFRs"));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    {
      add(new JLabel("VRN101"));
      String id = "VRN101";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "0.46";
        min = "0.3";
        most = "0.45";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_a.setText(max);
      monRob_a.setText(min);
      mostRob_a.setText(most);
      add(maxRob_a);
      add(monRob_a);
      add(mostRob_a);
      add(optimalRob_a);

    }
    {
      add(new JLabel("VRN102"));
      String id = "VRN102";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "200";
        min = "100";
        most = "100";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_b.setText(max);
      monRob_b.setText(min);
      mostRob_b.setText(most);
      add(maxRob_b);
      add(monRob_b);
      add(mostRob_b);
      add(optimalRob_b);

    }
    {
      add(new JLabel("VRN103"));
      String id = "VRN103";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "2";
        min = "1";
        most = "1";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_c.setText(max);
      monRob_c.setText(min);
      mostRob_c.setText(most);
      add(maxRob_c);
      add(monRob_c);
      add(mostRob_c);
      add(optimalRob_c);

    }
    {
      add(new JLabel("VRN104"));
      String id = "VRN104";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "0.46";
        min = "0.2";
        most = "0.45";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_d.setText(max);
      monRob_d.setText(min);
      mostRob_d.setText(most);
      add(maxRob_d);
      add(monRob_d);
      add(mostRob_d);
      add(optimalRob_d);

    }
    {
      add(new JLabel("VRN105"));
      String id = "VRN105";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "250";
        min = "100";
        most = "200";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_e.setText(max);
      monRob_e.setText(min);
      mostRob_e.setText(most);
      add(maxRob_e);
      add(monRob_e);
      add(mostRob_e);
      add(optimalRob_e);

    }
    {
      add(new JLabel("VRN106"));
      String id = "VRN106";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "3";
        min = "1";
        most = "2";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_f.setText(max);
      monRob_f.setText(min);
      mostRob_f.setText(most);
      add(maxRob_f);
      add(monRob_f);
      add(mostRob_f);
      add(optimalRob_f);

    }
    add(new JLabel("Internal Component NFRs"));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel("Value Analysis"));
    add(result);
    analyzer.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p1) {
        update();
      }
    });
    add(analyzer);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    pack();
    setVisible(true);
  }
  public void update() {
    // Checking inconsistency for system level NFRs

    int flag1 = 0;
    try {

    } catch (NumberFormatException e) {
    }
    // Checking inconistency for external hardware NFRs
    int flag2 = 0;
    try {
    } catch (NumberFormatException e2) {
    }
    // Checking inconsistency for robots
    double maxvalrob_a_2 = 0;
    double maxvalrob_b_2 = 0;
    double maxvalrob_c_2 = 0;
    double maxvalrob_d_2 = 0;
    double maxvalrob_e_2 = 0;
    double maxvalrob_f_2 = 0;
    double minvalrob_a_2 = 0;
    double minvalrob_b_2 = 0;
    double minvalrob_c_2 = 0;
    double minvalrob_d_2 = 0;
    double minvalrob_e_2 = 0;
    double minvalrob_f_2 = 0;
    double mostvalrob_a_2 = 0;
    double mostvalrob_b_2 = 0;
    double mostvalrob_c_2 = 0;
    double mostvalrob_d_2 = 0;
    double mostvalrob_e_2 = 0;
    double mostvalrob_f_2 = 0;
    double expectedvalrob_a_2 = 0;
    double expectedvalrob_b_2 = 0;
    double expectedvalrob_c_2 = 0;
    double expectedvalrob_d_2 = 0;
    double expectedvalrob_e_2 = 0;
    double expectedvalrob_f_2 = 0;
    double optimalvalrob_a_2 = 0;
    double optimalvalrob_b_2 = 0;
    double optimalvalrob_c_2 = 0;
    double optimalvalrob_d_2 = 0;
    double optimalvalrob_e_2 = 0;
    double optimalvalrob_f_2 = 0;
    int flag3 = 0;
    try {
      maxvalrob_a = Double.valueOf(maxRob_a.getText());
      maxvalrob_b = Double.valueOf(maxRob_b.getText());
      maxvalrob_c = Double.valueOf(maxRob_c.getText());
      maxvalrob_d = Double.valueOf(maxRob_d.getText());
      maxvalrob_e = Double.valueOf(maxRob_e.getText());
      maxvalrob_f = Double.valueOf(maxRob_f.getText());
      minvalrob_a = Double.valueOf(monRob_a.getText());
      minvalrob_b = Double.valueOf(monRob_b.getText());
      minvalrob_c = Double.valueOf(monRob_c.getText());
      minvalrob_d = Double.valueOf(monRob_d.getText());
      minvalrob_e = Double.valueOf(monRob_e.getText());
      minvalrob_f = Double.valueOf(monRob_f.getText());
      mostvalrob_a = Double.valueOf(mostRob_a.getText());
      mostvalrob_b = Double.valueOf(mostRob_b.getText());
      mostvalrob_c = Double.valueOf(mostRob_c.getText());
      mostvalrob_d = Double.valueOf(mostRob_d.getText());
      mostvalrob_e = Double.valueOf(mostRob_e.getText());
      mostvalrob_f = Double.valueOf(mostRob_f.getText());
      expectedvalrob_a = Double.valueOf((maxvalrob_a + minvalrob_a + (Double.valueOf(4) * mostvalrob_a)) / Double.valueOf(6));
      expectedvalrob_b = Double.valueOf((maxvalrob_b + minvalrob_b + (Double.valueOf(4) * mostvalrob_b)) / Double.valueOf(6));
      expectedvalrob_c = Double.valueOf((maxvalrob_c + minvalrob_c + (Double.valueOf(4) * mostvalrob_c)) / Double.valueOf(6));
      expectedvalrob_d = Double.valueOf((maxvalrob_d + minvalrob_d + (Double.valueOf(4) * mostvalrob_d)) / Double.valueOf(6));
      expectedvalrob_e = Double.valueOf((maxvalrob_e + minvalrob_e + (Double.valueOf(4) * mostvalrob_e)) / Double.valueOf(6));
      expectedvalrob_f = Double.valueOf((maxvalrob_f + minvalrob_f + (Double.valueOf(4) * mostvalrob_f)) / Double.valueOf(6));
      expectedvalrob_a = Double.valueOf((expectedvalrob_a / maxvalrob_a) * Double.valueOf(100));
      expectedvalrob_b = Double.valueOf((expectedvalrob_b / maxvalrob_b) * Double.valueOf(100));
      expectedvalrob_c = Double.valueOf((expectedvalrob_c / maxvalrob_c) * Double.valueOf(100));
      expectedvalrob_d = Double.valueOf((expectedvalrob_d / maxvalrob_d) * Double.valueOf(100));
      expectedvalrob_e = Double.valueOf((expectedvalrob_e / maxvalrob_e) * Double.valueOf(100));
      expectedvalrob_f = Double.valueOf((expectedvalrob_f / maxvalrob_f) * Double.valueOf(100));
      expectedvalrob_a = Math.round(expectedvalrob_a * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_b = Math.round(expectedvalrob_b * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_c = Math.round(expectedvalrob_c * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_d = Math.round(expectedvalrob_d * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_e = Math.round(expectedvalrob_e * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_f = Math.round(expectedvalrob_f * Double.valueOf(100)) / Double.valueOf(100);
      optimalvalrob_a = Double.valueOf(optimalRob_a.getText());
      optimalvalrob_b = Double.valueOf(optimalRob_b.getText());
      optimalvalrob_c = Double.valueOf(optimalRob_c.getText());
      optimalvalrob_d = Double.valueOf(optimalRob_d.getText());
      optimalvalrob_e = Double.valueOf(optimalRob_e.getText());
      optimalvalrob_f = Double.valueOf(optimalRob_f.getText());
      if (expectedvalrob_a > optimalvalrob_a) {
        flag3 = 1;
      }
      if (expectedvalrob_b > optimalvalrob_b) {
        flag3 = 1;
      }
      if (expectedvalrob_c > optimalvalrob_c) {
        flag3 = 1;
      }
      if (expectedvalrob_d > optimalvalrob_d) {
        flag3 = 1;
      }
      if (expectedvalrob_e > optimalvalrob_e) {
        flag3 = 1;
      }
      if (expectedvalrob_f > optimalvalrob_f) {
        flag3 = 1;
      }
    } catch (NumberFormatException e3) {
    }
    // Checking inconsistency for robots internal hardware
    int flag4 = 0;
    try {

    } catch (NumberFormatException e4) {
    }
    // Checking inconsistency for robots internal software
    int flag5 = 0;
    try {

    } catch (NumberFormatException e5) {
    }
    int flagc = 0;
    if (flag1 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for system level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flag2 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for external hardware level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flag3 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for Robot level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flag4 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for Robot internal hardware level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flag5 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for Robot internal software level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flagc == 0) {
      result.setText("Consistent");
    } else {
      result.setText("Inconsistent");
    }

  }
  public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Hospital_env4();
      }
    });
  }

}
