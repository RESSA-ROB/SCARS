package CreateR_3_Spec;

/*Generated by MPS */

import javax.swing.JFrame;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.GridLayout;
import javax.swing.JLabel;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

public class System extends JFrame {
  private DocumentListener listener = new DocumentListener() {
    public void insertUpdate(DocumentEvent p1) {
    }

    public void removeUpdate(DocumentEvent p1) {
    }

    public void changedUpdate(DocumentEvent p1) {
    }
  };
  private JTextField SystemRobotNFR_a = new JTextField();
  private JTextField SystemRobotNFR_b = new JTextField();
  private JTextField SystemRobotNFR_c = new JTextField();
  private JTextField SystemRobotNFR_d = new JTextField();
  private JTextField SystemRobotNFR_e = new JTextField();
  private JTextField SystemRobotNFR_f = new JTextField();
  private JTextField RobotHardNFR_a0 = new JTextField();
  private JTextField RobotHardNFR_a0_0 = new JTextField();
  private JTextField RobotHardNFR_a0_1 = new JTextField();
  private JTextField RobotHardNFR_a0_2 = new JTextField();
  private JTextField RobotHardNFR_a0_3 = new JTextField();
  private JTextField RobotHardNFR_a0_4 = new JTextField();
  private JTextField RobotSoftNFR_a0 = new JTextField();
  private JTextField maxRob_a = new JTextField();
  private JTextField maxRob_b = new JTextField();
  private JTextField maxRob_c = new JTextField();
  private JTextField maxRob_d = new JTextField();
  private JTextField maxRob_e = new JTextField();
  private JTextField maxRob_f = new JTextField();
  private JTextField maxRobHard_a0 = new JTextField();
  private JTextField maxRobHard_a0_0 = new JTextField();
  private JTextField maxRobHard_a0_1 = new JTextField();
  private JTextField maxRobHard_a0_2 = new JTextField();
  private JTextField maxRobHard_a0_3 = new JTextField();
  private JTextField maxRobHard_a0_4 = new JTextField();
  private JTextField maxRobSoft_a0 = new JTextField();
  private JTextField monRob_a = new JTextField();
  private JTextField monRob_b = new JTextField();
  private JTextField monRob_c = new JTextField();
  private JTextField monRob_d = new JTextField();
  private JTextField monRob_e = new JTextField();
  private JTextField monRob_f = new JTextField();
  private JTextField minRobHard_a0 = new JTextField();
  private JTextField minRobHard_a0_0 = new JTextField();
  private JTextField minRobHard_a0_1 = new JTextField();
  private JTextField minRobHard_a0_2 = new JTextField();
  private JTextField minRobHard_a0_3 = new JTextField();
  private JTextField minRobHard_a0_4 = new JTextField();
  private JTextField minRobSoft_a0 = new JTextField();
  private JTextField mostRob_a = new JTextField();
  private JTextField mostRob_b = new JTextField();
  private JTextField mostRob_c = new JTextField();
  private JTextField mostRob_d = new JTextField();
  private JTextField mostRob_e = new JTextField();
  private JTextField mostRob_f = new JTextField();
  private JTextField mostRobHard_a0 = new JTextField();
  private JTextField mostRobHard_a0_0 = new JTextField();
  private JTextField mostRobHard_a0_1 = new JTextField();
  private JTextField mostRobHard_a0_2 = new JTextField();
  private JTextField mostRobHard_a0_3 = new JTextField();
  private JTextField mostRobHard_a0_4 = new JTextField();
  private JTextField mostRobSoft_a0 = new JTextField();
  private JTextField optimalRob_a = new JTextField();
  private JTextField optimalRob_b = new JTextField();
  private JTextField optimalRob_c = new JTextField();
  private JTextField optimalRob_d = new JTextField();
  private JTextField optimalRob_e = new JTextField();
  private JTextField optimalRob_f = new JTextField();
  private JTextField optimalRobHard_a0 = new JTextField();
  private JTextField optimalRobHard_a0_0 = new JTextField();
  private JTextField optimalRobHard_a0_1 = new JTextField();
  private JTextField optimalRobHard_a0_2 = new JTextField();
  private JTextField optimalRobHard_a0_3 = new JTextField();
  private JTextField optimalRobHard_a0_4 = new JTextField();
  private JTextField optimalRobSoft_a0 = new JTextField();
  private String[] scenarionfr = new String[10000];
  private String[] scenarionfrmax = new String[10000];
  private String[] scenarionfrmin = new String[10000];
  private String[] scenarionfrmost = new String[10000];
  /*package*/ JButton analyzer = new JButton("Click Here");
  private JTextField result = new JTextField();


  public System() {
    setTitle("System");
    setLayout(new GridLayout(0, 5, 20, 10));
    add(new JLabel("NFR ID"));
    add(new JLabel("Max Value"));
    add(new JLabel("Min Value"));
    add(new JLabel("Most Likely Value"));
    add(new JLabel("Optimal Value"));
    int i = 0;
    // Fetching the scenario NFRs
    add(new JLabel("System NFRs"));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel("External Component NFRs"));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel("Robot NFRs"));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    {
      add(new JLabel("N101"));
      String id = "N101";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "0.46";
        min = "0.3";
        most = "0.4";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_a.setText(max);
      monRob_a.setText(min);
      mostRob_a.setText(most);
      add(maxRob_a);
      add(monRob_a);
      add(mostRob_a);
      add(optimalRob_a);

    }
    {
      add(new JLabel("N102"));
      String id = "N102";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "3";
        min = "1";
        most = "0.4";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_b.setText(max);
      monRob_b.setText(min);
      mostRob_b.setText(most);
      add(maxRob_b);
      add(monRob_b);
      add(mostRob_b);
      add(optimalRob_b);

    }
    {
      add(new JLabel("N103"));
      String id = "N103";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "100";
        min = "25";
        most = "40";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_c.setText(max);
      monRob_c.setText(min);
      mostRob_c.setText(most);
      add(maxRob_c);
      add(monRob_c);
      add(mostRob_c);
      add(optimalRob_c);

    }
    {
      add(new JLabel("N105"));
      String id = "N105";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "";
        min = "";
        most = "";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_d.setText(max);
      monRob_d.setText(min);
      mostRob_d.setText(most);
      add(maxRob_d);
      add(monRob_d);
      add(mostRob_d);
      add(optimalRob_d);

    }
    {
      add(new JLabel("N106"));
      String id = "N106";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "3";
        min = "1";
        most = "1.2";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_e.setText(max);
      monRob_e.setText(min);
      mostRob_e.setText(most);
      add(maxRob_e);
      add(monRob_e);
      add(mostRob_e);
      add(optimalRob_e);

    }
    {
      add(new JLabel("N107"));
      String id = "N107";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "100";
        min = "30";
        most = "50";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRob_f.setText(max);
      monRob_f.setText(min);
      mostRob_f.setText(most);
      add(maxRob_f);
      add(monRob_f);
      add(mostRob_f);
      add(optimalRob_f);

    }
    add(new JLabel("Internal Component NFRs"));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    add(new JLabel(""));
    {
      add(new JLabel("GN104"));
      String id = "GN104";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "99";
        min = "90";
        most = "98";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRobHard_a0.setText(max);
      minRobHard_a0.setText(min);
      mostRobHard_a0.setText(most);
      add(maxRobHard_a0);
      add(minRobHard_a0);
      add(mostRobHard_a0);
      add(optimalRobHard_a0);
    }
    {
      add(new JLabel("GN101"));
      String id = "GN101";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "6";
        min = "4";
        most = "4";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRobHard_a0_0.setText(max);
      minRobHard_a0_0.setText(min);
      mostRobHard_a0_0.setText(most);
      add(maxRobHard_a0_0);
      add(minRobHard_a0_0);
      add(mostRobHard_a0_0);
      add(optimalRobHard_a0_0);
    }
    {
      add(new JLabel("GN102"));
      String id = "GN102";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "10";
        min = "5";
        most = "5";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRobHard_a0_1.setText(max);
      minRobHard_a0_1.setText(min);
      mostRobHard_a0_1.setText(most);
      add(maxRobHard_a0_1);
      add(minRobHard_a0_1);
      add(mostRobHard_a0_1);
      add(optimalRobHard_a0_1);
    }
    {
      add(new JLabel("N104"));
      String id = "N104";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "99";
        min = "90";
        most = "96";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRobHard_a0_2.setText(max);
      minRobHard_a0_2.setText(min);
      mostRobHard_a0_2.setText(most);
      add(maxRobHard_a0_2);
      add(minRobHard_a0_2);
      add(mostRobHard_a0_2);
      add(optimalRobHard_a0_2);
    }
    {
      add(new JLabel("GN103"));
      String id = "GN103";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "98";
        min = "90";
        most = "95";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRobHard_a0_3.setText(max);
      minRobHard_a0_3.setText(min);
      mostRobHard_a0_3.setText(most);
      add(maxRobHard_a0_3);
      add(minRobHard_a0_3);
      add(mostRobHard_a0_3);
      add(optimalRobHard_a0_3);
    }
    {
      add(new JLabel("GN107"));
      String id = "GN107";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "98";
        min = "90";
        most = "96";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRobHard_a0_4.setText(max);
      minRobHard_a0_4.setText(min);
      mostRobHard_a0_4.setText(most);
      add(maxRobHard_a0_4);
      add(minRobHard_a0_4);
      add(mostRobHard_a0_4);
      add(optimalRobHard_a0_4);
    }
    {
      add(new JLabel("SN101"));
      String id = "SN101";
      int flag = 0;
      int k = 0;
      for (int j = 0; j < i; j++) {
        if (scenarionfr[j].equals(id)) {
          flag = 1;
          k = j;
          break;
        }
      }
      String max = "";
      String min = "";
      String most = "";
      if (flag == 0) {
        max = "10";
        min = "8";
        most = "8";
      } else {
        max = scenarionfrmax[k];
        min = scenarionfrmin[k];
        most = scenarionfrmost[k];
      }
      maxRobSoft_a0.setText(max);
      minRobSoft_a0.setText(min);
      mostRobSoft_a0.setText(most);
      add(maxRobSoft_a0);
      add(minRobSoft_a0);
      add(mostRobSoft_a0);
      add(optimalRobSoft_a0);
    }
    add(new JLabel("Value Analysis"));
    add(result);
    analyzer.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p1) {
        update();
      }
    });
    add(analyzer);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    pack();
    setVisible(true);
  }
  public void update() {
    // Checking inconsistency for system level NFRs

    int flag1 = 0;
    try {

    } catch (NumberFormatException e) {
    }
    // Checking inconistency for external hardware NFRs
    int flag2 = 0;
    try {
    } catch (NumberFormatException e2) {
    }
    // Checking inconsistency for robots
    double maxvalrob_a = 0;
    double maxvalrob_b = 0;
    double maxvalrob_c = 0;
    double maxvalrob_d = 0;
    double maxvalrob_e = 0;
    double maxvalrob_f = 0;
    double minvalrob_a = 0;
    double minvalrob_b = 0;
    double minvalrob_c = 0;
    double minvalrob_d = 0;
    double minvalrob_e = 0;
    double minvalrob_f = 0;
    double mostvalrob_a = 0;
    double mostvalrob_b = 0;
    double mostvalrob_c = 0;
    double mostvalrob_d = 0;
    double mostvalrob_e = 0;
    double mostvalrob_f = 0;
    double expectedvalrob_a = 0;
    double expectedvalrob_b = 0;
    double expectedvalrob_c = 0;
    double expectedvalrob_d = 0;
    double expectedvalrob_e = 0;
    double expectedvalrob_f = 0;
    double optimalvalrob_a = 0;
    double optimalvalrob_b = 0;
    double optimalvalrob_c = 0;
    double optimalvalrob_d = 0;
    double optimalvalrob_e = 0;
    double optimalvalrob_f = 0;
    int flag3 = 0;
    try {
      maxvalrob_a = Double.valueOf(maxRob_a.getText());
      maxvalrob_b = Double.valueOf(maxRob_b.getText());
      maxvalrob_c = Double.valueOf(maxRob_c.getText());
      maxvalrob_d = Double.valueOf(maxRob_d.getText());
      maxvalrob_e = Double.valueOf(maxRob_e.getText());
      maxvalrob_f = Double.valueOf(maxRob_f.getText());
      minvalrob_a = Double.valueOf(monRob_a.getText());
      minvalrob_b = Double.valueOf(monRob_b.getText());
      minvalrob_c = Double.valueOf(monRob_c.getText());
      minvalrob_d = Double.valueOf(monRob_d.getText());
      minvalrob_e = Double.valueOf(monRob_e.getText());
      minvalrob_f = Double.valueOf(monRob_f.getText());
      mostvalrob_a = Double.valueOf(mostRob_a.getText());
      mostvalrob_b = Double.valueOf(mostRob_b.getText());
      mostvalrob_c = Double.valueOf(mostRob_c.getText());
      mostvalrob_d = Double.valueOf(mostRob_d.getText());
      mostvalrob_e = Double.valueOf(mostRob_e.getText());
      mostvalrob_f = Double.valueOf(mostRob_f.getText());
      expectedvalrob_a = Double.valueOf((maxvalrob_a + minvalrob_a + (Double.valueOf(4) * mostvalrob_a)) / Double.valueOf(6));
      expectedvalrob_b = Double.valueOf((maxvalrob_b + minvalrob_b + (Double.valueOf(4) * mostvalrob_b)) / Double.valueOf(6));
      expectedvalrob_c = Double.valueOf((maxvalrob_c + minvalrob_c + (Double.valueOf(4) * mostvalrob_c)) / Double.valueOf(6));
      expectedvalrob_d = Double.valueOf((maxvalrob_d + minvalrob_d + (Double.valueOf(4) * mostvalrob_d)) / Double.valueOf(6));
      expectedvalrob_e = Double.valueOf((maxvalrob_e + minvalrob_e + (Double.valueOf(4) * mostvalrob_e)) / Double.valueOf(6));
      expectedvalrob_f = Double.valueOf((maxvalrob_f + minvalrob_f + (Double.valueOf(4) * mostvalrob_f)) / Double.valueOf(6));
      expectedvalrob_a = Double.valueOf((expectedvalrob_a / maxvalrob_a) * Double.valueOf(100));
      expectedvalrob_b = Double.valueOf((expectedvalrob_b / maxvalrob_b) * Double.valueOf(100));
      expectedvalrob_c = Double.valueOf((expectedvalrob_c / maxvalrob_c) * Double.valueOf(100));
      expectedvalrob_d = Double.valueOf((expectedvalrob_d / maxvalrob_d) * Double.valueOf(100));
      expectedvalrob_e = Double.valueOf((expectedvalrob_e / maxvalrob_e) * Double.valueOf(100));
      expectedvalrob_f = Double.valueOf((expectedvalrob_f / maxvalrob_f) * Double.valueOf(100));
      expectedvalrob_a = Math.round(expectedvalrob_a * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_b = Math.round(expectedvalrob_b * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_c = Math.round(expectedvalrob_c * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_d = Math.round(expectedvalrob_d * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_e = Math.round(expectedvalrob_e * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrob_f = Math.round(expectedvalrob_f * Double.valueOf(100)) / Double.valueOf(100);
      optimalvalrob_a = Double.valueOf(optimalRob_a.getText());
      optimalvalrob_b = Double.valueOf(optimalRob_b.getText());
      optimalvalrob_c = Double.valueOf(optimalRob_c.getText());
      optimalvalrob_d = Double.valueOf(optimalRob_d.getText());
      optimalvalrob_e = Double.valueOf(optimalRob_e.getText());
      optimalvalrob_f = Double.valueOf(optimalRob_f.getText());
      if (expectedvalrob_a > optimalvalrob_a) {
        flag3 = 1;
      }
      if (expectedvalrob_b > optimalvalrob_b) {
        flag3 = 1;
      }
      if (expectedvalrob_c > optimalvalrob_c) {
        flag3 = 1;
      }
      if (expectedvalrob_d > optimalvalrob_d) {
        flag3 = 1;
      }
      if (expectedvalrob_e > optimalvalrob_e) {
        flag3 = 1;
      }
      if (expectedvalrob_f > optimalvalrob_f) {
        flag3 = 1;
      }
    } catch (NumberFormatException e3) {
    }
    // Checking inconsistency for robots internal hardware
    double maxvalrobhard_a0 = 0;
    double maxvalrobhard_a0_0 = 0;
    double maxvalrobhard_a0_1 = 0;
    double maxvalrobhard_a0_2 = 0;
    double maxvalrobhard_a0_3 = 0;
    double maxvalrobhard_a0_4 = 0;
    double minvalrobhard_a0 = 0;
    double minvalrobhard_a0_0 = 0;
    double minvalrobhard_a0_1 = 0;
    double minvalrobhard_a0_2 = 0;
    double minvalrobhard_a0_3 = 0;
    double minvalrobhard_a0_4 = 0;
    double mostvalrobhard_a0 = 0;
    double mostvalrobhard_a0_0 = 0;
    double mostvalrobhard_a0_1 = 0;
    double mostvalrobhard_a0_2 = 0;
    double mostvalrobhard_a0_3 = 0;
    double mostvalrobhard_a0_4 = 0;
    double expectedvalrobhard_a0 = 0;
    double expectedvalrobhard_a0_0 = 0;
    double expectedvalrobhard_a0_1 = 0;
    double expectedvalrobhard_a0_2 = 0;
    double expectedvalrobhard_a0_3 = 0;
    double expectedvalrobhard_a0_4 = 0;
    double optimalvalrobhard_a0 = 0;
    double optimalvalrobhard_a0_0 = 0;
    double optimalvalrobhard_a0_1 = 0;
    double optimalvalrobhard_a0_2 = 0;
    double optimalvalrobhard_a0_3 = 0;
    double optimalvalrobhard_a0_4 = 0;
    int flag4 = 0;
    try {
      maxvalrobhard_a0 = Double.valueOf(maxRobHard_a0.getText());
      maxvalrobhard_a0_0 = Double.valueOf(maxRobHard_a0_0.getText());
      maxvalrobhard_a0_1 = Double.valueOf(maxRobHard_a0_1.getText());
      maxvalrobhard_a0_2 = Double.valueOf(maxRobHard_a0_2.getText());
      maxvalrobhard_a0_3 = Double.valueOf(maxRobHard_a0_3.getText());
      maxvalrobhard_a0_4 = Double.valueOf(maxRobHard_a0_4.getText());
      minvalrobhard_a0 = Double.valueOf(minRobHard_a0.getText());
      minvalrobhard_a0_0 = Double.valueOf(minRobHard_a0_0.getText());
      minvalrobhard_a0_1 = Double.valueOf(minRobHard_a0_1.getText());
      minvalrobhard_a0_2 = Double.valueOf(minRobHard_a0_2.getText());
      minvalrobhard_a0_3 = Double.valueOf(minRobHard_a0_3.getText());
      minvalrobhard_a0_4 = Double.valueOf(minRobHard_a0_4.getText());
      mostvalrobhard_a0 = Double.valueOf(mostRobHard_a0.getText());
      mostvalrobhard_a0_0 = Double.valueOf(mostRobHard_a0_0.getText());
      mostvalrobhard_a0_1 = Double.valueOf(mostRobHard_a0_1.getText());
      mostvalrobhard_a0_2 = Double.valueOf(mostRobHard_a0_2.getText());
      mostvalrobhard_a0_3 = Double.valueOf(mostRobHard_a0_3.getText());
      mostvalrobhard_a0_4 = Double.valueOf(mostRobHard_a0_4.getText());
      expectedvalrobhard_a0 = Double.valueOf((maxvalrobhard_a0 + minvalrobhard_a0 + (Double.valueOf(4) * mostvalrobhard_a0)) / Double.valueOf(6));
      expectedvalrobhard_a0_0 = Double.valueOf((maxvalrobhard_a0_0 + minvalrobhard_a0_0 + (Double.valueOf(4) * mostvalrobhard_a0_0)) / Double.valueOf(6));
      expectedvalrobhard_a0_1 = Double.valueOf((maxvalrobhard_a0_1 + minvalrobhard_a0_1 + (Double.valueOf(4) * mostvalrobhard_a0_1)) / Double.valueOf(6));
      expectedvalrobhard_a0_2 = Double.valueOf((maxvalrobhard_a0_2 + minvalrobhard_a0_2 + (Double.valueOf(4) * mostvalrobhard_a0_2)) / Double.valueOf(6));
      expectedvalrobhard_a0_3 = Double.valueOf((maxvalrobhard_a0_3 + minvalrobhard_a0_3 + (Double.valueOf(4) * mostvalrobhard_a0_3)) / Double.valueOf(6));
      expectedvalrobhard_a0_4 = Double.valueOf((maxvalrobhard_a0_4 + minvalrobhard_a0_4 + (Double.valueOf(4) * mostvalrobhard_a0_4)) / Double.valueOf(6));
      expectedvalrobhard_a0 = Double.valueOf((expectedvalrobhard_a0 / maxvalrobhard_a0) * Double.valueOf(100));
      expectedvalrobhard_a0_0 = Double.valueOf((expectedvalrobhard_a0_0 / maxvalrobhard_a0_0) * Double.valueOf(100));
      expectedvalrobhard_a0_1 = Double.valueOf((expectedvalrobhard_a0_1 / maxvalrobhard_a0_1) * Double.valueOf(100));
      expectedvalrobhard_a0_2 = Double.valueOf((expectedvalrobhard_a0_2 / maxvalrobhard_a0_2) * Double.valueOf(100));
      expectedvalrobhard_a0_3 = Double.valueOf((expectedvalrobhard_a0_3 / maxvalrobhard_a0_3) * Double.valueOf(100));
      expectedvalrobhard_a0_4 = Double.valueOf((expectedvalrobhard_a0_4 / maxvalrobhard_a0_4) * Double.valueOf(100));
      expectedvalrobhard_a0 = Math.round(expectedvalrobhard_a0 * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrobhard_a0_0 = Math.round(expectedvalrobhard_a0_0 * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrobhard_a0_1 = Math.round(expectedvalrobhard_a0_1 * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrobhard_a0_2 = Math.round(expectedvalrobhard_a0_2 * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrobhard_a0_3 = Math.round(expectedvalrobhard_a0_3 * Double.valueOf(100)) / Double.valueOf(100);
      expectedvalrobhard_a0_4 = Math.round(expectedvalrobhard_a0_4 * Double.valueOf(100)) / Double.valueOf(100);
      optimalvalrobhard_a0 = Double.valueOf(optimalRobHard_a0.getText());
      optimalvalrobhard_a0_0 = Double.valueOf(optimalRobHard_a0_0.getText());
      optimalvalrobhard_a0_1 = Double.valueOf(optimalRobHard_a0_1.getText());
      optimalvalrobhard_a0_2 = Double.valueOf(optimalRobHard_a0_2.getText());
      optimalvalrobhard_a0_3 = Double.valueOf(optimalRobHard_a0_3.getText());
      optimalvalrobhard_a0_4 = Double.valueOf(optimalRobHard_a0_4.getText());
      if (expectedvalrobhard_a0 > optimalvalrobhard_a0) {
        flag4 = 1;
      }
      if (expectedvalrobhard_a0_0 > optimalvalrobhard_a0_0) {
        flag4 = 1;
      }
      if (expectedvalrobhard_a0_1 > optimalvalrobhard_a0_1) {
        flag4 = 1;
      }
      if (expectedvalrobhard_a0_2 > optimalvalrobhard_a0_2) {
        flag4 = 1;
      }
      if (expectedvalrobhard_a0_3 > optimalvalrobhard_a0_3) {
        flag4 = 1;
      }
      if (expectedvalrobhard_a0_4 > optimalvalrobhard_a0_4) {
        flag4 = 1;
      }

    } catch (NumberFormatException e4) {
    }
    // Checking inconsistency for robots internal software
    double maxvalrobsoft_a0 = 0;
    double minvalrobsoft_a0 = 0;
    double mostvalrobsoft_a0 = 0;
    double expectedvalrobsoft_a0 = 0;
    double optimalvalrobsoft_a0 = 0;
    int flag5 = 0;
    try {
      maxvalrobsoft_a0 = Double.valueOf(maxRobSoft_a0.getText());
      minvalrobsoft_a0 = Double.valueOf(minRobSoft_a0.getText());
      mostvalrobsoft_a0 = Double.valueOf(mostRobSoft_a0.getText());
      expectedvalrobsoft_a0 = Double.valueOf((maxvalrobsoft_a0 + minvalrobsoft_a0 + (Double.valueOf(4) * mostvalrobsoft_a0)) / Double.valueOf(6));
      expectedvalrobsoft_a0 = Double.valueOf((expectedvalrobsoft_a0 / maxvalrobsoft_a0) * Double.valueOf(100));
      expectedvalrobsoft_a0 = Math.round(expectedvalrobsoft_a0 * Double.valueOf(100)) / Double.valueOf(100);
      optimalvalrobsoft_a0 = Double.valueOf(optimalRobSoft_a0.getText());
      if (expectedvalrobsoft_a0 > optimalvalrobsoft_a0) {
        flag5 = 1;
      }

    } catch (NumberFormatException e5) {
    }
    int flagc = 0;
    if (flag1 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for system level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flag2 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for external hardware level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flag3 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for Robot level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flag4 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for Robot internal hardware level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flag5 == 1) {
      JOptionPane.showMessageDialog(this, "NFR values are inconsistent for Robot internal software level NFRs", "ERROR", JOptionPane.ERROR_MESSAGE);
      flagc = 1;
    }
    if (flagc == 0) {
      result.setText("Consistent");
    } else {
      result.setText("Inconsistent");
    }

  }
  public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new System();
      }
    });
  }

}
