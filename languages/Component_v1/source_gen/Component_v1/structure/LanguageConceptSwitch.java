package Component_v1.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Actuators = 0;
  public static final int CentralNode = 1;
  public static final int CompositeComponent = 2;
  public static final int ContextNFRCorrelation = 3;
  public static final int ContextNFRCorrelation2 = 4;
  public static final int ContextNFRCorrelation3 = 5;
  public static final int Contexts = 6;
  public static final int HTypeIF = 7;
  public static final int HardwareComponent = 8;
  public static final int HardwareComponentInst = 9;
  public static final int HardwareRef = 10;
  public static final int IContext = 11;
  public static final int IContextInst = 12;
  public static final int IHardwareComponentInst = 13;
  public static final int IMobileRobotInst = 14;
  public static final int IScenario = 15;
  public static final int IScenarioInst = 16;
  public static final int ISoftwareComponentInst = 17;
  public static final int MTypeIF = 18;
  public static final int MobileRobotInst = 19;
  public static final int NFPProfile = 20;
  public static final int NFP_Profile = 21;
  public static final int NFR = 22;
  public static final int RunTimeNFRsAnnotation = 23;
  public static final int Scenario = 24;
  public static final int ScenarioNFR = 25;
  public static final int Sensors = 26;
  public static final int SoftwareComponent = 27;
  public static final int SoftwareComponentInst = 28;
  public static final int System = 29;
  public static final int TaskAssociation3 = 30;
  public static final int TaskNFRAssociation1 = 31;
  public static final int TaskNFRAssociation2 = 32;
  public static final int sofsubcomponent = 33;
  public static final int subcomponent = 34;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L);
    builder.put(0x6a627af554be7048L, Actuators);
    builder.put(0x4db49580d35a9d0aL, CentralNode);
    builder.put(0x4db49580d35a9e5cL, CompositeComponent);
    builder.put(0x5128cddc7b7b758aL, ContextNFRCorrelation);
    builder.put(0x5128cddc7bcba63cL, ContextNFRCorrelation2);
    builder.put(0x5128cddc7bd5e7e4L, ContextNFRCorrelation3);
    builder.put(0x5128cddc7b7b733fL, Contexts);
    builder.put(0x71a2aa893a59d148L, HTypeIF);
    builder.put(0x6a627af554be7033L, HardwareComponent);
    builder.put(0x6a627af554ca179dL, HardwareComponentInst);
    builder.put(0x6a627af554c0a264L, HardwareRef);
    builder.put(0x414363466c842eefL, IContext);
    builder.put(0x414363466c901693L, IContextInst);
    builder.put(0x6a627af554c03797L, IHardwareComponentInst);
    builder.put(0x51f789b6b5394bcbL, IMobileRobotInst);
    builder.put(0x414363466ca88fbcL, IScenario);
    builder.put(0x414363466ca893c4L, IScenarioInst);
    builder.put(0x74700d5d12d974c4L, ISoftwareComponentInst);
    builder.put(0x74700d5d128dd6c6L, MTypeIF);
    builder.put(0x51f789b6b5394bd3L, MobileRobotInst);
    builder.put(0x6a627af554d0e736L, NFPProfile);
    builder.put(0x6a627af554d0e733L, NFP_Profile);
    builder.put(0x53eb6ec85ab3d640L, NFR);
    builder.put(0x6a627af554d0e74cL, RunTimeNFRsAnnotation);
    builder.put(0x414363466c842ae5L, Scenario);
    builder.put(0x414363466c99ce1eL, ScenarioNFR);
    builder.put(0x6a627af554be7047L, Sensors);
    builder.put(0x6a627af554be7034L, SoftwareComponent);
    builder.put(0x74700d5d12d974c3L, SoftwareComponentInst);
    builder.put(0x51f789b6b5394bc1L, System);
    builder.put(0x4430c773569747ebL, TaskAssociation3);
    builder.put(0x4430c77356927e03L, TaskNFRAssociation1);
    builder.put(0x4430c773568626f9L, TaskNFRAssociation2);
    builder.put(0x2d838283918d4b38L, sofsubcomponent);
    builder.put(0x74700d5d12d180c0L, subcomponent);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
