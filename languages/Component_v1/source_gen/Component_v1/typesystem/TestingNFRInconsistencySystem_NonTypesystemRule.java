package Component_v1.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class TestingNFRInconsistencySystem_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public TestingNFRInconsistencySystem_NonTypesystemRule() {
  }
  public void applyRule(final SNode system, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    double compval = 0;
    double cons = 0;
    double sum = 0;
    double max = 0;
    double min = 0;
    // Testing NFR aggregation inconsistency
    {
      Iterator<SNode> nfp_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.NFR$9zIQ)).iterator();
      SNode nfp_var;
      while (nfp_it.hasNext()) {
        nfp_var = nfp_it.next();

        compval = 0;
        sum = 0;
        max = 0;
        min = 0;
        cons = Double.valueOf(SPropertyOperations.getString(nfp_var, PROPS.mostlikely$_N$s));
        cons = Double.valueOf(SPropertyOperations.getString(nfp_var, PROPS.mostlikely$_N$s));
        String nfrid2 = SPropertyOperations.getString(nfp_var, PROPS.name$MnvL);
        {
          Iterator<SNode> scenarioinst_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
          SNode scenarioinst_var;
          while (scenarioinst_it.hasNext()) {
            scenarioinst_var = scenarioinst_it.next();
            String nfrid = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
            if (nfrid.equals(nfrid2)) {
              cons = Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.mostlikely$C2PP));
            }
          }
        }

        SEnumerationLiteral NFRname = SPropertyOperations.getEnum(nfp_var, PROPS.nfrmetric$_HW4);

        compval = 0;
        if (SPropertyOperations.getEnum(nfp_var, PROPS.operation$_OJx) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x7d1b637ab2ed4ca9L, "NFR.structure.OperationEnumeration"), 0x7d1b637ab2ed4caaL, "Sum")) {
          sum = 1;
        }
        if (SPropertyOperations.getEnum(nfp_var, PROPS.operation$_OJx) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x7d1b637ab2ed4ca9L, "NFR.structure.OperationEnumeration"), 0x7d1b637ab2ed4cabL, "Max")) {
          max = 1;
        }
        if (SPropertyOperations.getEnum(nfp_var, PROPS.operation$_OJx) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x7d1b637ab2ed4ca9L, "NFR.structure.OperationEnumeration"), 0x7d1b637ab2ed4caeL, "Min")) {
          min = 1;
        }

        // Finding NFR from hardware list of Robot
        {
          Iterator<SNode> comp_it = Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.collectMany(SLinkOperations.collect(SLinkOperations.getChildren(system, LINKS.robots$ZlC7), LINKS.mobilerobot$ZnYh), LINKS.hardware$7Z_5), LINKS.hardware$nR7k)).iterator();
          SNode comp_var;
          while (comp_it.hasNext()) {
            comp_var = comp_it.next();
            {
              Iterator<SNode> schild_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(comp_var, LINKS.component$ISi3), LINKS.nfr$8n9A)).iterator();
              SNode schild_var;
              while (schild_it.hasNext()) {
                schild_var = schild_it.next();
                String id = SPropertyOperations.getString(schild_var, PROPS.name$MnvL);
                {
                  Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(nfp_var, LINKS.attributes$Lozl)).iterator();
                  SNode nfr_var;
                  while (nfr_it.hasNext()) {
                    nfr_var = nfr_it.next();
                    String s = SPropertyOperations.getString(SLinkOperations.getTarget(nfr_var, LINKS.fields$kG77), PROPS.name$MnvL);
                    double mostvalue = 0;
                    if (id.equals(s)) {
                      int exist = 0;
                      {
                        Iterator<SNode> scenarioinst_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
                        SNode scenarioinst_var;
                        while (scenarioinst_it.hasNext()) {
                          scenarioinst_var = scenarioinst_it.next();
                          String nfrid = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
                          if (nfrid.equals(s)) {
                            mostvalue = Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.mostlikely$C2PP));
                            exist = 1;
                          }
                        }
                      }
                      if (exist == 0) {
                        mostvalue = Double.valueOf(SPropertyOperations.getString(schild_var, PROPS.mostlikely$_N$s));
                      }
                      if (sum == 1) {
                        compval = compval + mostvalue;
                      }
                      if (max == 1) {
                        if (compval <= mostvalue) {
                          compval = mostvalue;
                        }
                      }
                      if (min == 1) {
                        if (compval >= mostvalue) {
                          compval = mostvalue;
                        }

                      }
                    }
                  }
                }
              }
            }

          }
        }

        // Finding NFR withing software list of robot
        {
          Iterator<SNode> comp_it = Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.collectMany(SLinkOperations.collect(SLinkOperations.getChildren(system, LINKS.robots$ZlC7), LINKS.mobilerobot$ZnYh), LINKS.software$84Ys), LINKS.software$7j_c)).iterator();
          SNode comp_var;
          while (comp_it.hasNext()) {
            comp_var = comp_it.next();
            {
              Iterator<SNode> schild_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(comp_var, LINKS.component$pKqJ), LINKS.nfr$Ta7D)).iterator();
              SNode schild_var;
              while (schild_it.hasNext()) {
                schild_var = schild_it.next();
                String id = SPropertyOperations.getString(schild_var, PROPS.name$MnvL);
                {
                  Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(nfp_var, LINKS.attributes$Lozl)).iterator();
                  SNode nfr_var;
                  while (nfr_it.hasNext()) {
                    nfr_var = nfr_it.next();
                    String s = SPropertyOperations.getString(SLinkOperations.getTarget(nfr_var, LINKS.fields$kG77), PROPS.name$MnvL);
                    double mostvalue = 0;
                    if (id.equals(s)) {
                      int exist = 0;
                      {
                        Iterator<SNode> scenarioinst_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
                        SNode scenarioinst_var;
                        while (scenarioinst_it.hasNext()) {
                          scenarioinst_var = scenarioinst_it.next();
                          String nfrid = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
                          if (nfrid.equals(s)) {
                            mostvalue = Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.mostlikely$C2PP));
                            exist = 1;
                          }
                        }
                      }
                      if (exist == 0) {
                        mostvalue = Double.valueOf(SPropertyOperations.getString(schild_var, PROPS.mostlikely$_N$s));
                      }

                      if (sum == 1) {
                        compval = compval + mostvalue;
                      }
                      if (max == 1) {
                        if (compval <= mostvalue) {
                          compval = mostvalue;
                        }
                      }
                      if (min == 1) {
                        if (compval >= mostvalue) {
                          compval = mostvalue;
                        }

                      }
                    }
                  }
                }
              }
            }
          }
        }
        {
          Iterator<SNode> subcomp_it = Sequence.fromIterable(SLinkOperations.collectMany(SLinkOperations.collect(SLinkOperations.getChildren(system, LINKS.robots$ZlC7), LINKS.mobilerobot$ZnYh), LINKS.subcomp$S3Vm)).iterator();
          SNode subcomp_var;
          while (subcomp_it.hasNext()) {
            subcomp_var = subcomp_it.next();
            {
              Iterator<SNode> schild_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(subcomp_var, LINKS.mobilerobot$ZnYh), LINKS.nfr$86Bz)).iterator();
              SNode schild_var;
              while (schild_it.hasNext()) {
                schild_var = schild_it.next();
                String id = SPropertyOperations.getString(schild_var, PROPS.name$MnvL);
                {
                  Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(nfp_var, LINKS.attributes$Lozl)).iterator();
                  SNode nfr_var;
                  while (nfr_it.hasNext()) {
                    nfr_var = nfr_it.next();
                    String s = SPropertyOperations.getString(SLinkOperations.getTarget(nfr_var, LINKS.fields$kG77), PROPS.name$MnvL);
                    double mostvalue = 0;
                    if (id.equals(s)) {
                      int exist = 0;
                      {
                        Iterator<SNode> scenarioinst_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
                        SNode scenarioinst_var;
                        while (scenarioinst_it.hasNext()) {
                          scenarioinst_var = scenarioinst_it.next();
                          String nfrid = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
                          if (nfrid.equals(s)) {
                            mostvalue = Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.mostlikely$C2PP));
                            exist = 1;
                          }
                        }
                      }
                      if (exist == 0) {
                        mostvalue = Double.valueOf(SPropertyOperations.getString(schild_var, PROPS.mostlikely$_N$s));
                      }

                      if (sum == 1) {
                        compval = compval + mostvalue;
                      }
                      if (max == 1) {
                        if (compval <= mostvalue) {
                          compval = mostvalue;
                        }
                      }
                      if (min == 1) {
                        if (compval >= mostvalue) {
                          compval = mostvalue;
                        }

                      }
                    }

                  }
                }
              }
            }
          }
        }
        // Finding NFR from the list defined for robot itself
        {
          Iterator<SNode> comp_it = Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(system, LINKS.robots$ZlC7), LINKS.mobilerobot$ZnYh)).iterator();
          SNode comp_var;
          while (comp_it.hasNext()) {
            comp_var = comp_it.next();
            {
              Iterator<SNode> schild_it = ListSequence.fromList(SLinkOperations.getChildren(comp_var, LINKS.nfr$86Bz)).iterator();
              SNode schild_var;
              while (schild_it.hasNext()) {
                schild_var = schild_it.next();
                String id = SPropertyOperations.getString(schild_var, PROPS.name$MnvL);
                {
                  Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(nfp_var, LINKS.attributes$Lozl)).iterator();
                  SNode nfr_var;
                  while (nfr_it.hasNext()) {
                    nfr_var = nfr_it.next();
                    String s = SPropertyOperations.getString(SLinkOperations.getTarget(nfr_var, LINKS.fields$kG77), PROPS.name$MnvL);
                    double mostvalue = 0;
                    if (id.equals(s)) {
                      int exist = 0;
                      {
                        Iterator<SNode> scenarioinst_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
                        SNode scenarioinst_var;
                        while (scenarioinst_it.hasNext()) {
                          scenarioinst_var = scenarioinst_it.next();
                          String nfrid = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
                          if (nfrid.equals(s)) {
                            mostvalue = Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.mostlikely$C2PP));
                            exist = 1;
                          }
                        }
                      }
                      if (exist == 0) {
                        mostvalue = Double.valueOf(SPropertyOperations.getString(schild_var, PROPS.mostlikely$_N$s));
                      }

                      if (sum == 1) {
                        compval = compval + mostvalue;
                      }
                      if (max == 1) {
                        if (compval <= mostvalue) {
                          compval = mostvalue;
                        }
                      }
                      if (min == 1) {
                        if (compval >= mostvalue) {
                          compval = mostvalue;
                        }

                      }
                    }
                  }
                }
              }
            }
          }
        }
        // Finding NFR in external hardware list
        {
          Iterator<SNode> comp_it = Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(system, LINKS.externalHardware$ZgeK), LINKS.hardware$nR7k)).iterator();
          SNode comp_var;
          while (comp_it.hasNext()) {
            comp_var = comp_it.next();
            {
              Iterator<SNode> schild_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(comp_var, LINKS.component$ISi3), LINKS.nfr$8n9A)).iterator();
              SNode schild_var;
              while (schild_it.hasNext()) {
                schild_var = schild_it.next();
                String id = SPropertyOperations.getString(schild_var, PROPS.name$MnvL);
                {
                  Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(nfp_var, LINKS.attributes$Lozl)).iterator();
                  SNode nfr_var;
                  while (nfr_it.hasNext()) {
                    nfr_var = nfr_it.next();
                    String s = SPropertyOperations.getString(SLinkOperations.getTarget(nfr_var, LINKS.fields$kG77), PROPS.name$MnvL);
                    double mostvalue = 0;
                    if (id.equals(s)) {
                      int exist = 0;
                      {
                        Iterator<SNode> scenarioinst_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
                        SNode scenarioinst_var;
                        while (scenarioinst_it.hasNext()) {
                          scenarioinst_var = scenarioinst_it.next();
                          String nfrid = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
                          if (nfrid.equals(s)) {
                            mostvalue = Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.mostlikely$C2PP));
                            exist = 1;
                          }
                        }
                      }
                      if (exist == 0) {
                        mostvalue = Double.valueOf(SPropertyOperations.getString(schild_var, PROPS.mostlikely$_N$s));
                      }

                      if (sum == 1) {
                        compval = compval + mostvalue;
                      }
                      if (max == 1) {
                        if (compval <= mostvalue) {
                          compval = mostvalue;
                        }
                      }
                      if (min == 1) {
                        if (compval >= mostvalue) {
                          compval = mostvalue;
                        }

                      }
                    }
                  }
                }
              }
            }
          }
        }


        // Different checking for different category to be added
        // cons is the mostlikely value of the mobile robot
        // compval is the computed mostlikely value of the dependent components
        if (compval != 0) {
          if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f810L, "Calmness_calmTiming"))) {
            if (cons < compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047171", null, errorTarget);
              }
            }
            if (cons >= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050704L, "Availability_Metric_Probability"))) {
            if (cons > compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047217", null, errorTarget);
              }
            }
            if (cons <= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050703L, "Cost_Total_cost_of_installation_or_use"))) {
            if (cons < compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047251", null, errorTarget);
              }
            }
            if (cons >= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a2L, "DataInput_Accuracy_Accuracy"))) {
            if (cons > compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047291", null, errorTarget);
              }
            }
            if (cons <= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f79eL, "DeviceCapability_ClockSpeed"))) {
            if (cons > compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047331", null, errorTarget);
              }
            }
            if (cons <= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7b4L, "Efficiency_maxtasks"))) {
            if (cons > compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047371", null, errorTarget);
              }
            }
            if (cons <= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7cfL, "EneryEfficiency_energyConsumption"))) {
            if (cons < compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047411", null, errorTarget);
              }
            }
            if (cons >= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7daL, "Mobility_binding"))) {
            if (cons < compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047451", null, errorTarget);
              }
            }
            if (cons >= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7adL, "Performance_response_time"))) {
            if (cons < compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047491", null, errorTarget);
              }
            }
            if (cons >= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f801L, "Privacy_information_leak"))) {
            if (cons < compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047531", null, errorTarget);
              }
            }
            if (cons >= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7f3L, "Reliability_precision_of_computation"))) {
            if (cons > compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047571", null, errorTarget);
              }
            }
            if (cons <= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7c5L, "Robustness_expectedTime"))) {
            if (cons < compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047611", null, errorTarget);
              }
            }
            if (cons >= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7e6L, "Safety"))) {
            if (cons > compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047651", null, errorTarget);
              }
            }
            if (cons <= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7bcL, "Security_encryptionLevel"))) {
            if (cons > compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047691", null, errorTarget);
              }
            }
            if (cons <= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a7L, "Usability_training_learning_time"))) {
            if (cons < compval) {
              {
                final MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Parameter values are inconistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL) + ". Total value for the component is " + compval + ". Required value is " + cons, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051711047731", null, errorTarget);
              }
            }
            if (cons >= compval) {
              typeCheckingContext.printToTrace("Parameter values consistent for " + SPropertyOperations.getString(nfp_var, PROPS.name$MnvL));

            }
          }
        } else {
        }

      }
    }
    // Testing whether NFR included in scenario-NFR is there in context specification
    {
      Iterator<SNode> scenario_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
      SNode scenario_var;
      while (scenario_it.hasNext()) {
        scenario_var = scenario_it.next();
        String id = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenario_var, LINKS.scenario$qccC), LINKS.scenario$hSbp), PROPS.name$MnvL);
        String nfr = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenario_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
        int flag = 0;
        {
          Iterator<SNode> scenario2_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenario$OBZg)).iterator();
          SNode scenario2_var;
          while (scenario2_it.hasNext()) {
            scenario2_var = scenario2_it.next();
            String id2 = SPropertyOperations.getString(scenario2_var, PROPS.name$MnvL);
            if (id == id2) {
              {
                Iterator<SNode> contexts1_it = Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(scenario2_var, LINKS.contexts$TqtJ), LINKS.contextinstance$gJkP)).iterator();
                SNode contexts1_var;
                while (contexts1_it.hasNext()) {
                  contexts1_var = contexts1_it.next();
                  String cid1 = SPropertyOperations.getString(contexts1_var, PROPS.ID$PwMA);
                  {
                    Iterator<SNode> context2_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.contexts$cCWl)).iterator();
                    SNode context2_var;
                    while (context2_it.hasNext()) {
                      context2_var = context2_it.next();
                      String cid2 = SPropertyOperations.getString(context2_var, PROPS.ID$PwMA);
                      if (cid1 == cid2) {
                        {
                          Iterator<SNode> nfr1_it = Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(context2_var, LINKS.NFR$VEPZ), LINKS.instances$J4Ji)).iterator();
                          SNode nfr1_var;
                          while (nfr1_it.hasNext()) {
                            nfr1_var = nfr1_it.next();
                            String nfr2 = SPropertyOperations.getString(nfr1_var, PROPS.name$MnvL);
                            if (nfr == nfr2) {
                              flag = 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

            }

          }
        }
        if (flag == 0) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "NFR " + nfr + " not in the list of contexts associated with the scenario " + id, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051721988272", null, errorTarget);
          }
        }
      }
    }
    // Testing scenario-NFR inconsistency
    {
      Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
      SNode nfr_var;
      while (nfr_it.hasNext()) {
        nfr_var = nfr_it.next();
        String k = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(nfr_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
        String minrevised = SPropertyOperations.getString(nfr_var, PROPS.min$C1EK);
        String maxrevised = SPropertyOperations.getString(nfr_var, PROPS.max$C28M);
        String minoriginal = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(nfr_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.minvalue$_Iq6);
        String maxoriginal = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(nfr_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.maxvalue$_Ib5);
        int minr = Integer.parseInt(minrevised);
        int mino = Integer.parseInt(minoriginal);
        int maxr = Integer.parseInt(maxrevised);
        int maxo = Integer.parseInt(maxoriginal);
        int flag = 0;
        if (minr < mino) {
          flag = 1;
        }
        if (maxr > maxo) {
          flag = 1;
        }
        if (flag == 1) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(system, "Range defined for " + k + " is inconsistent.", "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "2737999051718090418", null, errorTarget);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.System$Bh;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink NFR$9zIQ = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, 0x51f789b6b54d18a6L, "NFR");
    /*package*/ static final SContainmentLink scenarioNFR$QPmQ = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, 0x414363466c99cf7fL, "scenarioNFR");
    /*package*/ static final SContainmentLink associatedNFR$9uGq = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x25ff53a188dc1dfbL, "associatedNFR");
    /*package*/ static final SReferenceLink instances$J4Ji = MetaAdapterFactory.getReferenceLink(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x4430c773568b5292L, 0x4430c773568b5298L, "instances");
    /*package*/ static final SContainmentLink robots$ZlC7 = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, 0x51f789b6b5394bc8L, "robots");
    /*package*/ static final SReferenceLink mobilerobot$ZnYh = MetaAdapterFactory.getReferenceLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bcbL, 0x51f789b6b5394bd1L, "mobilerobot");
    /*package*/ static final SContainmentLink hardware$7Z_5 = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x4db49580d35a9e5cL, 0x6a627af554bfd4a1L, "hardware");
    /*package*/ static final SReferenceLink hardware$nR7k = MetaAdapterFactory.getReferenceLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554c03797L, 0x6a627af554c0a267L, "hardware");
    /*package*/ static final SContainmentLink component$ISi3 = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554be7033L, 0x74700d5d12d1f847L, "component");
    /*package*/ static final SContainmentLink nfr$8n9A = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x74700d5d12d180c0L, 0x74700d5d12d180c6L, "nfr");
    /*package*/ static final SContainmentLink attributes$Lozl = MetaAdapterFactory.getContainmentLink(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x9b30d388c2f18e2L, "attributes");
    /*package*/ static final SReferenceLink fields$kG77 = MetaAdapterFactory.getReferenceLink(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x71a2aa893a520c22L, 0x3ef7a3245800fbfbL, "fields");
    /*package*/ static final SContainmentLink software$84Ys = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x4db49580d35a9e5cL, 0x6a627af554bfd4a3L, "software");
    /*package*/ static final SReferenceLink software$7j_c = MetaAdapterFactory.getReferenceLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x74700d5d12d974c4L, 0x74700d5d12d974c5L, "software");
    /*package*/ static final SContainmentLink component$pKqJ = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554be7034L, 0x2d838283918d4b44L, "component");
    /*package*/ static final SContainmentLink nfr$Ta7D = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x2d838283918d4b38L, 0x2d838283918d4b41L, "nfr");
    /*package*/ static final SContainmentLink subcomp$S3Vm = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x4db49580d35a9e5cL, 0x8c718e51b9e4fd4L, "subcomp");
    /*package*/ static final SContainmentLink nfr$86Bz = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x4db49580d35a9e5cL, 0x6a627af554bfd4aaL, "nfr");
    /*package*/ static final SContainmentLink externalHardware$ZgeK = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, 0x51f789b6b5394bc6L, "externalHardware");
    /*package*/ static final SContainmentLink scenario$qccC = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x414363466c99ce9fL, "scenario");
    /*package*/ static final SReferenceLink scenario$hSbp = MetaAdapterFactory.getReferenceLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466ca88fbcL, 0x414363466ca892c2L, "scenario");
    /*package*/ static final SContainmentLink scenario$OBZg = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, 0x414363466c843d57L, "scenario");
    /*package*/ static final SContainmentLink contexts$TqtJ = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c842ae5L, 0x414363466c843796L, "contexts");
    /*package*/ static final SReferenceLink contextinstance$gJkP = MetaAdapterFactory.getReferenceLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c842eefL, 0x414363466c9010a5L, "contextinstance");
    /*package*/ static final SContainmentLink contexts$cCWl = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, 0x5128cddc7bd5e533L, "contexts");
    /*package*/ static final SContainmentLink NFR$VEPZ = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x5128cddc7b7b733fL, 0x487a27454075e59cL, "NFR");
  }

  private static final class PROPS {
    /*package*/ static final SProperty mostlikely$_N$s = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x3f5881b2c4419ee4L, "mostlikely");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty mostlikely$C2PP = MetaAdapterFactory.getProperty(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x25ff53a1888d4ac3L, "mostlikely");
    /*package*/ static final SProperty nfrmetric$_HW4 = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x3f5881b2c4419ee1L, "nfrmetric");
    /*package*/ static final SProperty operation$_OJx = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x3f5881b2c4419ee9L, "operation");
    /*package*/ static final SProperty ID$PwMA = MetaAdapterFactory.getProperty(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x5128cddc7b7b733fL, 0x5128cddc7b7b8105L, "ID");
    /*package*/ static final SProperty min$C1EK = MetaAdapterFactory.getProperty(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x25ff53a1888d4abeL, "min");
    /*package*/ static final SProperty max$C28M = MetaAdapterFactory.getProperty(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x25ff53a1888d4ac0L, "max");
    /*package*/ static final SProperty minvalue$_Iq6 = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x3f5881b2c4419ee3L, "minvalue");
    /*package*/ static final SProperty maxvalue$_Ib5 = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x3f5881b2c4419ee2L, "maxvalue");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept System$Bh = MetaAdapterFactory.getConcept(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, "Component_v1.structure.System");
  }
}
