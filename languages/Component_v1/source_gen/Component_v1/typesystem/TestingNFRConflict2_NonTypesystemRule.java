package Component_v1.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Iterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class TestingNFRConflict2_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public TestingNFRConflict2_NonTypesystemRule() {
  }
  public void applyRule(final SNode system, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<String> NFR_names = ListSequence.fromList(new ArrayList<String>());
    List<Double> NFR_maxValues = ListSequence.fromList(new ArrayList<Double>());
    List<Double> NFR_minValues = ListSequence.fromList(new ArrayList<Double>());
    List<Double> NFR_mostlikelyValues = ListSequence.fromList(new ArrayList<Double>());
    List<String> NFR_idList = ListSequence.fromList(new ArrayList<String>());
    List<Double> expectedValues = ListSequence.fromList(new ArrayList<Double>());
    List<String> conflict_pair_obtained = ListSequence.fromList(new ArrayList<String>());

    //  Defining NFR Conflict pair list
    List<String> NFR_conflict_pair = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(NFR_conflict_pair).addElement("Cost-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Cost-DeviceCapability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Cost-DataInput");
    ListSequence.fromList(NFR_conflict_pair).addElement("Usability-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Usability-Efficiency");
    ListSequence.fromList(NFR_conflict_pair).addElement("Usability-Security");
    ListSequence.fromList(NFR_conflict_pair).addElement("Efficiency-Robustness");
    ListSequence.fromList(NFR_conflict_pair).addElement("EnergyEfficiency-Usability");
    ListSequence.fromList(NFR_conflict_pair).addElement("EnergyEfficiency-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("EnergyEfficiency-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Mobility-EnergyEfficiency");
    ListSequence.fromList(NFR_conflict_pair).addElement("Performance-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Performance-Robustness");
    ListSequence.fromList(NFR_conflict_pair).addElement("Performance-Safety");
    ListSequence.fromList(NFR_conflict_pair).addElement("Security-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Mobility-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Reliability-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Reliability-Efficiency");
    ListSequence.fromList(NFR_conflict_pair).addElement("Safety-Usability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Safety-Efficiency");
    ListSequence.fromList(NFR_conflict_pair).addElement("Privacy-Usability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Security-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("Privacy-Availability");
    ListSequence.fromList(NFR_conflict_pair).addElement("DataInput-Performance");
    ListSequence.fromList(NFR_conflict_pair).addElement("Calmness-Usability");
    {
      Iterator<SNode> scenario_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenario$OBZg)).iterator();
      SNode scenario_var;
      while (scenario_it.hasNext()) {
        scenario_var = scenario_it.next();
        String scenarioid = SPropertyOperations.getString(scenario_var, PROPS.name$MnvL);
        // Fetch data for the system

        // Fetch data for internal software component of each robot
        {
          Iterator<SNode> robot3_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.robots$ZlC7)).iterator();
          SNode robot3_var;
          while (robot3_it.hasNext()) {
            robot3_var = robot3_it.next();
            {
              Iterator<SNode> scomp_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(robot3_var, LINKS.mobilerobot$ZnYh), LINKS.software$84Ys)).iterator();
              SNode scomp_var;
              while (scomp_it.hasNext()) {
                scomp_var = scomp_it.next();
                String concat = "Scenario : " + scenarioid + " || Mobile Robot : " + SPropertyOperations.getString(SLinkOperations.getTarget(robot3_var, LINKS.mobilerobot$ZnYh), PROPS.name$MnvL) + " --> Software Component: " + SPropertyOperations.getString(SLinkOperations.getTarget(scomp_var, LINKS.software$7j_c), PROPS.name$MnvL);
                {
                  Iterator<SNode> nfrscomp_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(scomp_var, LINKS.software$7j_c), LINKS.component$pKqJ), LINKS.nfr$Ta7D)).iterator();
                  SNode nfrscomp_var;
                  while (nfrscomp_it.hasNext()) {
                    nfrscomp_var = nfrscomp_it.next();
                    SEnumerationLiteral NFRname = SPropertyOperations.getEnum(nfrscomp_var, PROPS.nfrmetric$_HW4);
                    String max = SPropertyOperations.getString(nfrscomp_var, PROPS.maxvalue$_Ib5);
                    String min = SPropertyOperations.getString(nfrscomp_var, PROPS.minvalue$_Iq6);
                    String mostlikely = SPropertyOperations.getString(nfrscomp_var, PROPS.mostlikely$_N$s);
                    String id = SPropertyOperations.getString(nfrscomp_var, PROPS.name$MnvL);
                    ListSequence.fromList(NFR_maxValues).addElement(Double.valueOf(max));
                    ListSequence.fromList(NFR_minValues).addElement(Double.valueOf(min));
                    ListSequence.fromList(NFR_mostlikelyValues).addElement(Double.valueOf(mostlikely));
                    ListSequence.fromList(NFR_idList).addElement(id);
                    String NFRnameactual = "";
                    if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f810L, "Calmness_calmTiming"))) {
                      NFRnameactual = "Calmness";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050704L, "Availability_Metric_Probability"))) {
                      NFRnameactual = "Availability";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050703L, "Cost_Total_cost_of_installation_or_use"))) {
                      NFRnameactual = "Cost";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a2L, "DataInput_Accuracy_Accuracy"))) {
                      NFRnameactual = "DataInput";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f79eL, "DeviceCapability_ClockSpeed"))) {
                      NFRnameactual = "DeviceCapability";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7b4L, "Efficiency_maxtasks"))) {
                      NFRnameactual = "Efficiency";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7cfL, "EneryEfficiency_energyConsumption"))) {
                      NFRnameactual = "EnergyEfficiency";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7daL, "Mobility_binding"))) {
                      NFRnameactual = "Mobility";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7adL, "Performance_response_time"))) {
                      NFRnameactual = "Performance";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f801L, "Privacy_information_leak"))) {
                      NFRnameactual = "Privacy";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7f3L, "Reliability_precision_of_computation"))) {
                      NFRnameactual = "Reliability";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7c5L, "Robustness_expectedTime"))) {
                      NFRnameactual = "Robustness";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7e6L, "Safety"))) {
                      NFRnameactual = "Safety";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7bcL, "Security_encryptionLevel"))) {
                      NFRnameactual = "Security";
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a7L, "Usability_training_learning_time"))) {
                      NFRnameactual = "Usability";
                    }
                    NFRnameactual = NFRnameactual + "-" + id;
                    ListSequence.fromList(NFR_names).addElement(NFRnameactual);
                  }
                }
                // Now do the check whether any NFR id matches with scenario-NFR list then update the value accordingly
                {
                  Iterator<SNode> scenarioinst_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
                  SNode scenarioinst_var;
                  while (scenarioinst_it.hasNext()) {
                    scenarioinst_var = scenarioinst_it.next();
                    String scenarioinstname = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.scenario$qccC), LINKS.scenario$hSbp), PROPS.name$MnvL);
                    if (scenarioid == scenarioinstname) {
                      String nfrscid = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
                      {
                        Iterator<String> id_it = ListSequence.fromList(NFR_idList).iterator();
                        String id_var;
                        while (id_it.hasNext()) {
                          id_var = id_it.next();
                          if (id_var == nfrscid) {
                            int index = ListSequence.fromList(NFR_idList).indexOf(id_var);
                            ListSequence.fromList(NFR_maxValues).setElement(index, Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.max$C28M)));
                            ListSequence.fromList(NFR_minValues).setElement(index, Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.min$C1EK)));
                            ListSequence.fromList(NFR_mostlikelyValues).setElement(index, Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.mostlikely$C2PP)));
                          }
                        }
                      }
                    }
                  }
                }
                List<String> NFRnames_ExpectedList = ListSequence.fromList(new ArrayList<String>());
                double mostlikely2 = 0;
                int indexChosen = 0;
                int flag = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Cost")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    double compNormalized = 1 - normalizedval;
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(compNormalized);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of cost is:  " + compNormalized;

                  }

                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Availability")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = ((double) expected) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(normalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Availability is:  " + normalizedval;

                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("DeviceCapability")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(normalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Device Capability is:  " + normalizedval;

                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("DataInput")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(normalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Data Input is:  " + normalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Usability")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    double compNormalizedval = 1 - normalizedval;
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(compNormalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Usability is:  " + compNormalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = -1;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Performance")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    double compNormalizedval = 1 - normalizedval;
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(compNormalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Performance is:  " + compNormalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Efficiency") && !(item.contains("EnergyEfficiency"))) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(normalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Efficiency is:  " + normalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Security")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(normalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Security is:  " + normalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Robustness")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    double compNormalizedval = 1 - normalizedval;
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(compNormalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Robustness is:  " + compNormalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("EnergyEfficiency")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    double compNormalizedval = 1 - normalizedval;
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(compNormalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Energy Efficiency is:  " + compNormalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Mobility")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    double compNormalizedval = 1 - normalizedval;
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(compNormalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Mobility is:  " + compNormalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Safety")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(normalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Safety is:  " + normalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Reliability")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(normalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Reliability is:  " + normalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Privacy")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    double compNormalizedval = 1 - normalizedval;
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(compNormalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Privacy is:  " + compNormalizedval;
                  }
                }
                mostlikely2 = 0;
                indexChosen = 0;
                for (String item : NFR_names) {
                  int index = ListSequence.fromList(NFR_names).indexOf(item);
                  indexChosen = index;
                  if (item.contains("Calmness")) {
                    flag = 1;
                  }
                  if (flag == 1) {
                    // Expected value of cost
                    double expected = (((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen)) + ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) + ((double) 4) * ((double) ListSequence.fromList(NFR_mostlikelyValues).getElement(indexChosen))) / ((double) 6);
                    // Normalized Expected value
                    double range = ((double) ListSequence.fromList(NFR_maxValues).getElement(indexChosen)) - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double numerator = expected - ((double) ListSequence.fromList(NFR_minValues).getElement(indexChosen));
                    double normalizedval = ((double) numerator) / ((double) range);
                    int k = ((int) (normalizedval * 100));
                    normalizedval = ((double) (((double) k) / ((double) 100)));
                    double compNormalizedval = 1 - normalizedval;
                    flag = 0;
                    ListSequence.fromList(expectedValues).addElement(compNormalizedval);
                    ListSequence.fromList(NFRnames_ExpectedList).addElement(ListSequence.fromList(NFR_names).getElement(indexChosen));
                    concat = concat + "|| \n Expected val of Calmness is:  " + compNormalizedval;
                  }
                }
                List<String> NFR_namesList = ListSequence.fromList(new ArrayList<String>());
                List<String> NFR_idListall = ListSequence.fromList(new ArrayList<String>());
                List<Double> NFR_mostlikelyvalues = ListSequence.fromList(new ArrayList<Double>());
                List<String> NFR_nameListDummy = ListSequence.fromList(new ArrayList<String>());
                int dummyListIndex = 0;
                {
                  Iterator<SNode> nfr_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(scomp_var, LINKS.software$7j_c), LINKS.component$pKqJ), LINKS.nfr$Ta7D)).iterator();
                  SNode nfr_var;
                  while (nfr_it.hasNext()) {
                    nfr_var = nfr_it.next();
                    SEnumerationLiteral NFRname = SPropertyOperations.getEnum(nfr_var, PROPS.nfrmetric$_HW4);
                    String NFRnameactual = "";
                    if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f810L, "Calmness_calmTiming"))) {
                      NFRnameactual = "Calmness";
                      // w1
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050704L, "Availability_Metric_Probability"))) {
                      NFRnameactual = "Availability";
                      // w2
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050703L, "Cost_Total_cost_of_installation_or_use"))) {
                      NFRnameactual = "Cost";
                      // w3
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a2L, "DataInput_Accuracy_Accuracy"))) {
                      NFRnameactual = "DataInput";
                      // w4
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f79eL, "DeviceCapability_ClockSpeed"))) {
                      NFRnameactual = "DeviceCapability";
                      // w5
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7b4L, "Efficiency_maxtasks"))) {
                      NFRnameactual = "Efficiency";
                      // w6
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7cfL, "EneryEfficiency_energyConsumption"))) {
                      NFRnameactual = "EnergyEfficiency";
                      // w7
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7daL, "Mobility_binding"))) {
                      NFRnameactual = "Mobility";
                      // w8
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7adL, "Performance_response_time"))) {
                      NFRnameactual = "Performance";
                      // w9
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f801L, "Privacy_information_leak"))) {
                      NFRnameactual = "Privacy";
                      // w10
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7f3L, "Reliability_precision_of_computation"))) {
                      NFRnameactual = "Reliability";
                      // w11
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7c5L, "Robustness_expectedTime"))) {
                      NFRnameactual = "Robustness";
                      // w12
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7e6L, "Safety"))) {
                      NFRnameactual = "Safety";
                      // w13
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7bcL, "Security_encryptionLevel"))) {
                      NFRnameactual = "Security";
                      // w14
                    } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a7L, "Usability_training_learning_time"))) {
                      NFRnameactual = "Usability";
                      // w15
                    }
                    if ((int) ListSequence.fromList(NFR_namesList).indexOf(NFRnameactual) == -1) {
                      ListSequence.fromList(NFR_namesList).addElement(NFRnameactual);
                    }
                    ListSequence.fromList(NFR_nameListDummy).addElement(NFRnameactual + SPropertyOperations.getString(nfr_var, PROPS.name$MnvL));
                    ListSequence.fromList(NFR_mostlikelyvalues).addElement(Double.valueOf(SPropertyOperations.getString(nfr_var, PROPS.mostlikely$_N$s)));
                    ListSequence.fromList(NFR_idListall).addElement(SPropertyOperations.getString(nfr_var, PROPS.name$MnvL));
                  }
                }
                {
                  Iterator<SNode> scenarioinst_it = ListSequence.fromList(SLinkOperations.getChildren(system, LINKS.scenarioNFR$QPmQ)).iterator();
                  SNode scenarioinst_var;
                  while (scenarioinst_it.hasNext()) {
                    scenarioinst_var = scenarioinst_it.next();
                    String scenarioinstname = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.scenario$qccC), LINKS.scenario$hSbp), PROPS.name$MnvL);
                    if (scenarioid == scenarioinstname) {
                      String nfrscid = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(scenarioinst_var, LINKS.associatedNFR$9uGq), LINKS.instances$J4Ji), PROPS.name$MnvL);
                      {
                        Iterator<String> id_it = ListSequence.fromList(NFR_idListall).iterator();
                        String id_var;
                        while (id_it.hasNext()) {
                          id_var = id_it.next();
                          if (id_var == nfrscid) {
                            int index = ListSequence.fromList(NFR_idListall).indexOf(id_var);
                            ListSequence.fromList(NFR_mostlikelyvalues).setElement(index, Double.valueOf(SPropertyOperations.getString(scenarioinst_var, PROPS.mostlikely$C2PP)));
                          }
                        }
                      }
                    }
                  }
                }
                int lengthI = dummyListIndex;
                double mostlikely3 = 0;
                // Steps for NFR ID selection when same NFR have different definitions
                List<String> NFR_idListconcise = ListSequence.fromList(new ArrayList<String>());
                mostlikely3 = 0;
                String name = "";
                String id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Cost")) {
                    name = "Cost";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);

                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Availability")) {
                    name = "Availability";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("DeviceCapability")) {
                    name = "DeviceCapability";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("DataInput")) {
                    name = "DataInput";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Usability")) {
                    name = "Usability";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Performance")) {
                    name = "Performance";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Efficiency") && !(item.contains("EnergyEfficiency"))) {
                    name = "Efficiency";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Security")) {
                    name = "Security";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Robustness")) {
                    name = "Robustness";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("EnergyEfficiency")) {
                    name = "EnergyEfficiency";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Mobility")) {
                    name = "Mobility";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Safety")) {
                    name = "Safety";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Reliability")) {
                    name = "Reliability";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Privacy")) {
                    name = "Privacy";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                mostlikely3 = 0;
                name = "";
                id = "";
                for (String item : NFR_nameListDummy) {
                  int index = ListSequence.fromList(NFR_nameListDummy).indexOf(item);
                  if (item.contains("Calmness")) {
                    name = "Calmness";
                    id = ListSequence.fromList(NFR_idListall).getElement(index);
                    String nfrid = name + "-" + id;
                    ListSequence.fromList(NFR_idListconcise).addElement(nfrid);
                  }
                }
                List<String> nfrvarList2 = ListSequence.fromList(new ArrayList<String>());
                List<Integer> nfrdepval2 = ListSequence.fromList(new ArrayList<Integer>());
                List<String> nfrl3 = ListSequence.fromList(new ArrayList<String>());
                List<String> nfrl4 = ListSequence.fromList(new ArrayList<String>());
                List<String> nfrl1 = ListSequence.fromList(new ArrayList<String>());
                List<String> nfrl2 = ListSequence.fromList(new ArrayList<String>());
                List<String> nfrl5 = ListSequence.fromList(new ArrayList<String>());
                int cval = 0;
                String vars = "v";

                {
                  Iterator<SNode> fgoal_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(scomp_var, LINKS.software$7j_c), LINKS.component$pKqJ), LINKS.tasks$CSig)).iterator();
                  SNode fgoal_var;
                  while (fgoal_it.hasNext()) {
                    fgoal_var = fgoal_it.next();
                    String goalName = SPropertyOperations.getString(fgoal_var, PROPS.name$MnvL);
                    String objective = "Scenario - " + scenarioid + " Mobile Robot: " + SPropertyOperations.getString(SLinkOperations.getTarget(robot3_var, LINKS.mobilerobot$ZnYh), PROPS.name$MnvL) + " Software Component: " + SPropertyOperations.getString(SLinkOperations.getTarget(scomp_var, LINKS.software$7j_c), PROPS.name$MnvL) + " Functional Objective: " + goalName;
                    // Creation of Objective Function
                    {
                      Iterator<SNode> goal2_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(scomp_var, LINKS.software$7j_c), LINKS.component$pKqJ), LINKS.association$CXUC)).iterator();
                      SNode goal2_var;
                      while (goal2_it.hasNext()) {
                        goal2_var = goal2_it.next();
                        String goalName2 = SPropertyOperations.getString(SLinkOperations.getTarget(goal2_var, LINKS.tasks$SHnI), PROPS.name$MnvL);

                        if (goalName.compareTo(goalName2) == 0) {
                          // Now store the NFR id in the nfrvarlist and dependency value in the nfrdepval list
                          ListSequence.fromList(nfrvarList2).addElement(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(goal2_var, LINKS.NFRs$SGTG), LINKS.instances$J4Ji), PROPS.name$MnvL));
                          ListSequence.fromList(nfrdepval2).addElement(SPropertyOperations.getInteger(goal2_var, PROPS.value$xoLa));
                        }
                      }
                    }
                    String temp = "";
                    {
                      Iterator<String> item_it = ListSequence.fromList(nfrvarList2).iterator();
                      String item_var;
                      while (item_it.hasNext()) {
                        item_var = item_it.next();
                        if (temp != "") {
                          temp = temp.concat("+");
                        }
                        cval++;
                        vars = "v";
                        vars = vars.concat(String.valueOf(cval));
                        int index = ListSequence.fromList(nfrvarList2).indexOf(item_var);
                        int depval = ListSequence.fromList(nfrdepval2).getElement(index);
                        temp = temp.concat(String.valueOf(depval) + "* " + vars);
                        ListSequence.fromList(nfrl3).addElement(item_var + "- " + vars);
                        ListSequence.fromList(nfrl4).addElement(vars);
                      }
                    }
                    objective = objective.concat(" --> Objective Function: " + temp + " Consraints: ");
                    // Fetching of NFR
                    {
                      Iterator<SNode> goal2_it = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(scomp_var, LINKS.software$7j_c), LINKS.component$pKqJ), LINKS.association$CXUC)).iterator();
                      SNode goal2_var;
                      while (goal2_it.hasNext()) {
                        goal2_var = goal2_it.next();
                        String goalName2 = SPropertyOperations.getString(SLinkOperations.getTarget(goal2_var, LINKS.tasks$SHnI), PROPS.name$MnvL);
                        if (goalName.compareTo(goalName2) == 0) {
                          SEnumerationLiteral NFRname = SPropertyOperations.getEnum(SLinkOperations.getTarget(SLinkOperations.getTarget(goal2_var, LINKS.NFRs$SGTG), LINKS.instances$J4Ji), PROPS.nfrmetric$_HW4);
                          String ids = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(goal2_var, LINKS.NFRs$SGTG), LINKS.instances$J4Ji), PROPS.name$MnvL);
                          String NFRnameactual = "";
                          if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f810L, "Calmness_calmTiming"))) {
                            NFRnameactual = "Calmness";
                            // w1
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050704L, "Availability_Metric_Probability"))) {
                            NFRnameactual = "Availability";
                            // w2
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a9050703L, "Cost_Total_cost_of_installation_or_use"))) {
                            NFRnameactual = "Cost";
                            // w3
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a2L, "DataInput_Accuracy_Accuracy"))) {
                            NFRnameactual = "DataInput";
                            // w4
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f79eL, "DeviceCapability_ClockSpeed"))) {
                            NFRnameactual = "DeviceCapability";
                            // w5
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7b4L, "Efficiency_maxtasks"))) {
                            NFRnameactual = "Efficiency";
                            // w6
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7cfL, "EneryEfficiency_energyConsumption"))) {
                            NFRnameactual = "EnergyEfficiency";
                            // w7
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7daL, "Mobility_binding"))) {
                            NFRnameactual = "Mobility";
                            // w8
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7adL, "Performance_response_time"))) {
                            NFRnameactual = "Performance";
                            // w9
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f801L, "Privacy_information_leak"))) {
                            NFRnameactual = "Privacy";
                            // w10
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7f3L, "Reliability_precision_of_computation"))) {
                            NFRnameactual = "Reliability";
                            // w11
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7c5L, "Robustness_expectedTime"))) {
                            NFRnameactual = "Robustness";
                            // w12
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7e6L, "Safety"))) {
                            NFRnameactual = "Safety";
                            // w13
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7bcL, "Security_encryptionLevel"))) {
                            NFRnameactual = "Security";
                            // w14
                          } else if (NFRname.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x2405e2b0a9050702L, "NFR.structure.NFR_metric_names"), 0x2405e2b0a907f7a7L, "Usability_training_learning_time"))) {
                            NFRnameactual = "Usability";
                            // w15
                          }
                          ListSequence.fromList(nfrl1).addElement(NFRnameactual + "-" + ids);
                          ListSequence.fromList(nfrl2).addElement(NFRnameactual);
                          ListSequence.fromList(nfrl5).addElement(ids);
                        }
                      }
                    }
                    int sizel = ListSequence.fromList(nfrl2).count();
                    for (int i1 = 0; i1 < sizel; i1++) {
                      String nfr1 = ListSequence.fromList(nfrl2).getElement(i1);
                      for (int j1 = i1 + 1; j1 < sizel; j1++) {
                        String nfr2 = ListSequence.fromList(nfrl2).getElement(j1);
                        String pair1 = nfr1 + "-" + nfr2;
                        String pair2 = nfr2 + "-" + nfr1;
                        String item1 = "";
                        String item2 = "";
                        int index1 = 0;
                        int index2 = 0;
                        double exp1 = 0.0;
                        double exp2 = 0.0;
                        String it1 = "";
                        String it2 = "";
                        double temps = 0.0;
                        double Maxmvalue = 0.0;
                        if (ListSequence.fromList(NFR_conflict_pair).indexOf(pair1) != -1) {
                          item1 = ListSequence.fromList(nfrl1).getElement(i1);
                          item2 = ListSequence.fromList(nfrl1).getElement(j1);
                          it1 = ListSequence.fromList(nfrl5).getElement(i1);
                          it2 = ListSequence.fromList(nfrl5).getElement(j1);
                          index1 = ListSequence.fromList(NFRnames_ExpectedList).indexOf(item1);
                          index2 = ListSequence.fromList(NFRnames_ExpectedList).indexOf(item2);
                          exp1 = ListSequence.fromList(expectedValues).getElement(index1);
                          exp2 = ListSequence.fromList(expectedValues).getElement(index2);
                        } else if (ListSequence.fromList(NFR_conflict_pair).indexOf(pair2) != -1) {
                          item1 = ListSequence.fromList(nfrl1).getElement(j1);
                          item2 = ListSequence.fromList(nfrl1).getElement(i1);
                          it1 = ListSequence.fromList(nfrl5).getElement(j1);
                          it2 = ListSequence.fromList(nfrl5).getElement(i1);
                          index1 = ListSequence.fromList(NFRnames_ExpectedList).indexOf(item1);
                          index2 = ListSequence.fromList(NFRnames_ExpectedList).indexOf(item2);
                          exp1 = ListSequence.fromList(expectedValues).getElement(index1);
                          exp2 = ListSequence.fromList(expectedValues).getElement(index2);
                        }
                        if ((exp1 >= 0.5 && exp1 <= 1.0) || (exp2 >= 0.5 && exp2 <= 1.0)) {
                          temps = exp2 - 0.5;
                          if (temps >= 0.25) {
                            Maxmvalue = 1 - exp1;
                          } else {
                            Maxmvalue = temps;
                          }
                          // Case Low
                          String var1 = "";
                          String var2 = "";
                          {
                            Iterator<String> itemk_it = ListSequence.fromList(nfrl3).iterator();
                            String itemk_var;
                            while (itemk_it.hasNext()) {
                              itemk_var = itemk_it.next();
                              int k = ListSequence.fromList(nfrl3).indexOf(itemk_var);
                              if (itemk_var.contains(it1)) {
                                var1 = ListSequence.fromList(nfrl4).getElement(k);
                              } else if (itemk_var.contains(it2)) {
                                var2 = ListSequence.fromList(nfrl4).getElement(k);
                              }
                            }
                          }
                          String temp2 = "0<= " + var1 + " + " + var2 + " + M - M * " + temps + " <=2, where M lies between 0.1 - " + Maxmvalue;
                          objective = objective.concat(temp2 + " ");
                        } else if ((exp1 >= 0.0 && exp1 < 0.5) || (exp2 >= 0.0 && exp2 < 0.5)) {
                          temps = 0.5 - exp2;
                          if (temps >= 0.25) {
                            Maxmvalue = 1 - exp1;
                          } else {
                            Maxmvalue = temps;
                          }
                          // Case Low
                          String var1 = "";
                          String var2 = "";
                          {
                            Iterator<String> itemk_it = ListSequence.fromList(nfrl3).iterator();
                            String itemk_var;
                            while (itemk_it.hasNext()) {
                              itemk_var = itemk_it.next();
                              int k = ListSequence.fromList(nfrl3).indexOf(itemk_var);
                              if (itemk_var.contains(it1)) {
                                var1 = ListSequence.fromList(nfrl4).getElement(k);
                              } else if (itemk_var.contains(it2)) {
                                var2 = ListSequence.fromList(nfrl4).getElement(k);
                              }
                            }
                          }
                          String temp2 = "0<= " + var1 + " + " + var2 + " + M - e ^ (M * " + temps + ") <=2, where M lies between 0.1 - " + Maxmvalue;
                          objective = objective.concat(temp2 + " ");
                        } else if ((exp1 >= 0.0 && exp1 < 0.5) || (exp2 >= 0.5 && exp2 <= 1.0)) {
                          temps = 0.5 - exp2;
                          String var1 = "";
                          String var2 = "";
                          {
                            Iterator<String> itemk_it = ListSequence.fromList(nfrl3).iterator();
                            String itemk_var;
                            while (itemk_it.hasNext()) {
                              itemk_var = itemk_it.next();
                              int k = ListSequence.fromList(nfrl3).indexOf(itemk_var);
                              if (itemk_var.contains(it1)) {
                                var1 = ListSequence.fromList(nfrl4).getElement(k);
                              } else if (itemk_var.contains(it2)) {
                                var2 = ListSequence.fromList(nfrl4).getElement(k);
                              }
                            }
                          }

                          if (temps >= 0.25) {
                            Maxmvalue = 1 - exp1;
                            String temp2 = "0<= " + var1 + " + " + var2 + " + M - M * " + temps + " <=2, where M lies between 0.1 - " + Maxmvalue;
                            objective = objective.concat(temp2 + " ");

                          } else {
                            Maxmvalue = temps;
                            String temp2 = "0<= " + var1 + " + " + var2 + " + M - M ^ (10 * " + temps + ") <=2, where M lies between 0.1 - " + Maxmvalue;
                            objective = objective.concat(temp2 + " ");

                          }
                        } else if ((exp1 >= 0.5 && exp1 <= 1.0) || (exp2 >= 0.0 && exp2 < 0.5)) {
                          temps = exp2 - 0.5;
                          String var1 = "";
                          String var2 = "";
                          {
                            Iterator<String> itemk_it = ListSequence.fromList(nfrl3).iterator();
                            String itemk_var;
                            while (itemk_it.hasNext()) {
                              itemk_var = itemk_it.next();
                              int k = ListSequence.fromList(nfrl3).indexOf(itemk_var);
                              if (itemk_var.contains(it1)) {
                                var1 = ListSequence.fromList(nfrl4).getElement(k);
                              } else if (itemk_var.contains(it2)) {
                                var2 = ListSequence.fromList(nfrl4).getElement(k);
                              }
                            }
                          }

                          if (temps >= 0.25) {
                            Maxmvalue = 1 - exp1;
                            String temp2 = "0<= " + var1 + " + " + var2 + " + M - e ^ (M * " + temps + ") <=2, where M lies between 0.1 - " + Maxmvalue;
                            objective = objective.concat(temp2 + " ");

                          } else {
                            Maxmvalue = temps;
                            String temp2 = "0<= " + var1 + " + " + var2 + " + M - M ^ (10 * " + temps + ") <=2, where M lies between 0.1 - " + Maxmvalue;
                            objective = objective.concat(temp2 + " ");

                          }
                        }
                      }
                    }
                    {
                      final MessageTarget errorTarget = new NodeMessageTarget();
                      IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(system, objective, "r:1524284d-b0a0-4e87-9b87-3259ef92f715(Component_v1.typesystem)", "1947599972198156114", null, errorTarget);
                    }
                    ListSequence.fromList(nfrl1).clear();
                    ListSequence.fromList(nfrl2).clear();
                    ListSequence.fromList(nfrl3).clear();
                    ListSequence.fromList(nfrl4).clear();
                    ListSequence.fromList(nfrl5).clear();
                    ListSequence.fromList(nfrvarList2).clear();
                    ListSequence.fromList(nfrdepval2).clear();
                  }
                }



                // Clearing arrays before fetching components of same robot
                ListSequence.fromList(NFR_names).clear();
                ListSequence.fromList(NFR_idList).clear();
                ListSequence.fromList(NFR_maxValues).clear();
                ListSequence.fromList(NFR_minValues).clear();
                ListSequence.fromList(NFR_mostlikelyValues).clear();
                ListSequence.fromList(NFR_idList).clear();
                ListSequence.fromList(NFR_idListall).clear();
                ListSequence.fromList(NFR_namesList).clear();
                ListSequence.fromList(NFR_mostlikelyvalues).clear();
                ListSequence.fromList(NFR_nameListDummy).clear();
                ListSequence.fromList(NFR_idListconcise).clear();
                ListSequence.fromList(expectedValues).clear();
              }
            }
            // Clearing arrays before fetching next robot components
            ListSequence.fromList(NFR_names).clear();
            ListSequence.fromList(NFR_idList).clear();
            ListSequence.fromList(NFR_maxValues).clear();
            ListSequence.fromList(NFR_minValues).clear();
            ListSequence.fromList(NFR_mostlikelyValues).clear();

          }
        }


      }
    }
    List<String> conflictsList = ListSequence.fromList(new ArrayList<String>());
    {
      Iterator<String> conflict_it = ListSequence.fromList(conflict_pair_obtained).iterator();
      String conflict_var;
      while (conflict_it.hasNext()) {
        conflict_var = conflict_it.next();
        if (ListSequence.fromList(conflictsList).contains(conflict_var)) {
          // Do nothing
        } else {
          ListSequence.fromList(conflictsList).addElement(conflict_var);
        }
      }
    }
    {
      Iterator<String> conflict_it = ListSequence.fromList(conflictsList).iterator();
      String conflict_var;
      while (conflict_it.hasNext()) {
        conflict_var = conflict_it.next();
      }
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.System$Bh;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink scenario$OBZg = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, 0x414363466c843d57L, "scenario");
    /*package*/ static final SContainmentLink robots$ZlC7 = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, 0x51f789b6b5394bc8L, "robots");
    /*package*/ static final SReferenceLink mobilerobot$ZnYh = MetaAdapterFactory.getReferenceLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bcbL, 0x51f789b6b5394bd1L, "mobilerobot");
    /*package*/ static final SContainmentLink software$84Ys = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x4db49580d35a9e5cL, 0x6a627af554bfd4a3L, "software");
    /*package*/ static final SReferenceLink software$7j_c = MetaAdapterFactory.getReferenceLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x74700d5d12d974c4L, 0x74700d5d12d974c5L, "software");
    /*package*/ static final SContainmentLink component$pKqJ = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x6a627af554be7034L, 0x2d838283918d4b44L, "component");
    /*package*/ static final SContainmentLink nfr$Ta7D = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x2d838283918d4b38L, 0x2d838283918d4b41L, "nfr");
    /*package*/ static final SContainmentLink scenarioNFR$QPmQ = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, 0x414363466c99cf7fL, "scenarioNFR");
    /*package*/ static final SContainmentLink scenario$qccC = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x414363466c99ce9fL, "scenario");
    /*package*/ static final SReferenceLink scenario$hSbp = MetaAdapterFactory.getReferenceLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466ca88fbcL, 0x414363466ca892c2L, "scenario");
    /*package*/ static final SContainmentLink associatedNFR$9uGq = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x25ff53a188dc1dfbL, "associatedNFR");
    /*package*/ static final SReferenceLink instances$J4Ji = MetaAdapterFactory.getReferenceLink(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x4430c773568b5292L, 0x4430c773568b5298L, "instances");
    /*package*/ static final SContainmentLink tasks$CSig = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x2d838283918d4b38L, 0x53832ec4e964b26L, "tasks");
    /*package*/ static final SContainmentLink association$CXUC = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x2d838283918d4b38L, 0x53832ec4e964b29L, "association");
    /*package*/ static final SReferenceLink tasks$SHnI = MetaAdapterFactory.getReferenceLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x4430c77356927e03L, 0x4430c77356927e06L, "tasks");
    /*package*/ static final SContainmentLink NFRs$SGTG = MetaAdapterFactory.getContainmentLink(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x4430c77356927e03L, 0x4430c77356927e04L, "NFRs");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty nfrmetric$_HW4 = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x3f5881b2c4419ee1L, "nfrmetric");
    /*package*/ static final SProperty maxvalue$_Ib5 = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x3f5881b2c4419ee2L, "maxvalue");
    /*package*/ static final SProperty minvalue$_Iq6 = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x3f5881b2c4419ee3L, "minvalue");
    /*package*/ static final SProperty mostlikely$_N$s = MetaAdapterFactory.getProperty(0xddad85b58f7640d8L, 0x9a0dbd322c713e77L, 0x3ef7a32457f426a6L, 0x3f5881b2c4419ee4L, "mostlikely");
    /*package*/ static final SProperty max$C28M = MetaAdapterFactory.getProperty(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x25ff53a1888d4ac0L, "max");
    /*package*/ static final SProperty min$C1EK = MetaAdapterFactory.getProperty(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x25ff53a1888d4abeL, "min");
    /*package*/ static final SProperty mostlikely$C2PP = MetaAdapterFactory.getProperty(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x414363466c99ce1eL, 0x25ff53a1888d4ac3L, "mostlikely");
    /*package*/ static final SProperty value$xoLa = MetaAdapterFactory.getProperty(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x4430c77356927e03L, 0x523c1b045056208eL, "value");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept System$Bh = MetaAdapterFactory.getConcept(0x79fb875b5c4f4986L, 0x892e2475e9d0c842L, 0x51f789b6b5394bc1L, "Component_v1.structure.System");
  }
}
